# -*- coding: utf-8 -*-import arcpyimport timeclass Toolbox:    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [RenderTool]class RenderTool:    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Tool"        self.description = ""    def getParameterInfo(self):        """Define the tool parameters."""        para0 = arcpy.Parameter(            displayName="Your Project",            name="WorkProject",            datatype="DEFile",            parameterType="Required",            direction="Input"        )        para1 = arcpy.Parameter(            displayName="Name of layer you want to render",            name="layer_name",            datatype="GPString",            parameterType="Required",            direction="Input"        )        para2 = arcpy.Parameter(            displayName="Folder of new project to save rendered layer",            name="new_project_folder",            datatype="DEFolder",            parameterType="Required",            direction="Input"        )        para3 = arcpy.Parameter(            displayName="Name of the new project",            name="new_project_name",            datatype="GPString",            parameterType="Required",            direction="Input"        )        params = [para0, para1, para2, para3]        return params    def isLicensed(self):        """Set whether the tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter. This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        readtime = 2.5        start = 0        maxi = 100        step = 25        arcpy.SetProgressor("step", "Checking project and layer", start, maxi, step)        time.sleep(readtime)        arcpy.AddMessage("Checking project and layer")        file_address = parameters[0].valueAsText        project = arcpy.mp.ArcGISProject(file_address)        layername = parameters[1].valueAsText        if layername == 'GarageParking':            layer = project.listMaps('Map')[0].listLayers()[1]            symb = layer.symbology            arcpy.SetProgressorPosition(start + step)            arcpy.SetProgressorLabel("start to update render")            time.sleep(readtime)            arcpy.AddMessage("start to update render")            symb.updateRenderer('GraduatedColorsRenderer')            symb.renderer.classificationfield = "Shape_Area"            arcpy.SetProgressorPosition(start + step + step)            arcpy.SetProgressorLabel("setting render")            time.sleep(readtime)            arcpy.AddMessage("setting render")            symb.renderer.breakCount = 5            symb.renderer.colorRamp = project.listColorRamps('Oranges (5 Classes)')[0]            layer.symbology = symb            arcpy.SetProgressorPosition(maxi)            arcpy.SetProgressorLabel("saving project")            time.sleep(readtime)            arcpy.AddMessage("saving project")        if layername == 'Structures':            layer = project.listMaps('Map')[0].listLayers()[0]            symb = layer.symbology            arcpy.SetProgressorPosition(start + step)            arcpy.SetProgressorLabel("start to update render")            time.sleep(readtime)            arcpy.AddMessage("start to update render")            symb.updateRenderer('UniqueValueRenderer')            layer.symbology = symb            arcpy.SetProgressorPosition(maxi)            arcpy.SetProgressorLabel("saving project")            time.sleep(readtime)            arcpy.AddMessage("saving project")        else:            arcpy.AddMessage("We can't work with this layer")        new_project = parameters[2].valueAsText + "\\" + parameters[3].valueAsText        project.saveACopy(new_project)        arcpy.AddMessage("Done!")        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return